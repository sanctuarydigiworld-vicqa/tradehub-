/**
 * @fileoverview Firestore Security Rules for TradeFlow.
 *
 * Core Philosophy: This ruleset enforces a strict ownership model for vendors, buyers, and their associated resources (products, orders, etc.). Vendor approval status controls product visibility. Notifications are broadly accessible but writes are limited.
 *
 * Data Structure:
 * - /vendors/{vendorId}: Vendor profiles, controlled by the vendor themselves.
 * - /vendors/{vendorId}/products/{productId}: Products listed by vendors, visibility dependent on vendor approval.
 * - /buyers/{buyerId}: Buyer profiles, controlled by the buyer themselves.
 * - /buyers/{buyerId}/orders/{orderId}: Orders placed by buyers.
 * - /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}: Items within an order.
 * - /orders/{orderId}/payments/{paymentId}: Payments made for an order.
 * - /notifications/{notificationId}: Notifications sent to users.
 *
 * Key Security Decisions:
 * - Vendors can only manage their own profiles and products.
 * - Buyers can only manage their own profiles and orders.
 * - Listing products requires the associated vendor to be approved.
 * - Notifications can be read by anyone, but writes are restricted.
 *
 * Denormalization for Authorization:
 * - The 'isApproved' field is denormalized from the Vendor document to the Product document to allow product listing without reading the Vendor document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to vendor profiles.
     * @path /vendors/{vendorId}
     * @allow (create) - Vendor with UID 'vendor123' can create their profile if vendorId matches.
     * @allow (get, list, update, delete) - Vendor with UID 'vendor123' can read, update, or delete their profile if vendorId matches.
     * @deny (create) - Vendor with UID 'vendor123' cannot create a profile with a different vendorId.
     * @deny (update, delete) - Another vendor (UID 'anotherVendor') cannot update or delete vendor 'vendor123' profile.
     * @principle Enforces document ownership for writes.
     */
    match /vendors/{vendorId} {
      function isOwner(vendorId) {
        return request.auth != null && request.auth.uid == vendorId;
      }
      function isExistingOwner(vendorId) {
        return isOwner(vendorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(vendorId);
      allow update: if isExistingOwner(vendorId);
      allow delete: if isExistingOwner(vendorId);
    }

    /**
     * @description Controls access to products listed by a vendor.
     * @path /vendors/{vendorId}/products/{productId}
     * @allow (create) - Vendor with UID 'vendor123' can create a product under their vendorId if vendor is approved.
     * @allow (get, list) - Anyone can read and list products, but only approved vendor's products are visible.
     * @allow (update, delete) - Vendor with UID 'vendor123' can update or delete their product if vendorId matches.
     * @deny (create) - Vendor with UID 'vendor123' cannot create a product with a different vendorId or if vendor is not approved.
     * @deny (update, delete) - Another vendor (UID 'anotherVendor') cannot update or delete vendor 'vendor123' product.
     * @principle Enforces document ownership for writes and vendor approval for listing.
     */
    match /vendors/{vendorId}/products/{productId} {
      function isOwner(vendorId) {
        return request.auth != null && request.auth.uid == vendorId;
      }
      function isExistingOwner(vendorId) {
        return isOwner(vendorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(vendorId);
      allow update: if isExistingOwner(vendorId);
      allow delete: if isExistingOwner(vendorId);
    }

    /**
     * @description Controls access to buyer profiles.
     * @path /buyers/{buyerId}
     * @allow (create) - Buyer with UID 'buyer123' can create their profile if buyerId matches.
     * @allow (get, list, update, delete) - Buyer with UID 'buyer123' can read, update, or delete their profile if buyerId matches.
     * @deny (create) - Buyer with UID 'buyer123' cannot create a profile with a different buyerId.
     * @deny (update, delete) - Another buyer (UID 'anotherBuyer') cannot update or delete buyer 'buyer123' profile.
     * @principle Enforces document ownership for writes.
     */
    match /buyers/{buyerId} {
      function isOwner(buyerId) {
        return request.auth != null && request.auth.uid == buyerId;
      }
      function isExistingOwner(buyerId) {
        return isOwner(buyerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(buyerId);
      allow update: if isExistingOwner(buyerId);
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Controls access to orders placed by buyers.
     * @path /buyers/{buyerId}/orders/{orderId}
     * @allow (create) - Buyer with UID 'buyer123' can create an order under their buyerId if buyerId matches.
     * @allow (get, list, update, delete) - Buyer with UID 'buyer123' can read, update, or delete their order if buyerId matches.
     * @deny (create) - Buyer with UID 'buyer123' cannot create an order with a different buyerId.
     * @deny (update, delete) - Another buyer (UID 'anotherBuyer') cannot update or delete buyer 'buyer123' order.
     * @principle Enforces document ownership for writes.
     */
    match /buyers/{buyerId}/orders/{orderId} {
      function isOwner(buyerId) {
        return request.auth != null && request.auth.uid == buyerId;
      }
      function isExistingOwner(buyerId) {
        return isOwner(buyerId) && resource != null;
      }

      allow get: if true;
      allow list: if isOwner(buyerId);
      allow create: if isOwner(buyerId);
      allow update: if isExistingOwner(buyerId);
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Controls access to order items within an order.
     * @path /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list, create, update, delete) - Buyer with UID 'buyer123' can manage order items under their orders if buyerId matches.
     * @deny (create) - Buyer with UID 'buyer123' cannot create an orderItem with a different buyerId.
     * @deny (update, delete) - Another buyer (UID 'anotherBuyer') cannot update or delete buyer 'buyer123' orderItem.
     * @principle Enforces document ownership for writes.
     */
    match /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId} {
      function isOwner(buyerId) {
        return request.auth != null && request.auth.uid == buyerId;
      }
      function isExistingOwner(buyerId) {
        return isOwner(buyerId) && resource != null;
      }

      allow get: if true;
      allow list: if isOwner(buyerId);
      allow create: if isOwner(buyerId);
      allow update: if isExistingOwner(buyerId);
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Controls access to payments made for an order.
     * @path /orders/{orderId}/payments/{paymentId}
     * @allow (get, list) - Anyone can read payments.
     * @deny (create, update, delete) - No one can create, update, or delete payments through client-side rules.
     * @principle Restricts write access to payments.
     */
    match /orders/{orderId}/payments/{paymentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to notifications.
     * @path /notifications/{notificationId}
     * @allow (get, list) - Anyone can read notifications.
     * @deny (create, update, delete) - No one can create, update, or delete notifications through client-side rules.
     * @principle Restricts write access to notifications.
     */
    match /notifications/{notificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
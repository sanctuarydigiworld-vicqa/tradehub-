/**
 * @description This ruleset enforces a public read, owner-write model for products, and restricts user profile access to the owner.
 * @dataStructure
 *  - /users/{userId} - Stores public user profiles, accessible only to the owning user.
 *  - /products/{productId} - Stores product listings, publicly readable but only writable by the product's vendor.
 * @keySecurityDecisions
 *  - Product listings are publicly readable to maximize marketplace visibility.
 *  - User profiles are private; only the owner can read or modify their own profile.
 *  - The 'vendor' field in the Product document is used to enforce ownership for product modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, list) User with matching {userId} can read their profile.
     * @allow (create, update, delete) User with matching {userId} can modify their profile.
     * @deny (get, list) User without matching {userId} cannot read other profiles.
     * @deny (create, update, delete) User without matching {userId} cannot modify other profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read product listings, but only the vendor can create, update, or delete.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product listings.
     * @allow (create) Only the vendor can create a product listing, and must set the 'vendor' field to their UID.
     * @allow (update, delete) Only the vendor can update or delete a product listing.
     * @deny (create) A user cannot create a product listing with a 'vendor' field that doesn't match their UID.
     * @deny (update, delete) A non-vendor cannot update or delete a product listing.
     * @principle Public read, owner-only writes for product listings.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.vendor == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.vendor);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.vendor);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}